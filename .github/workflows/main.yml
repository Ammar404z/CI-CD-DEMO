# Name of the GitHub Actions workflow (appears in Actions tab)
name: CI Pipeline

# Global environment variables (available in all jobs)
env:
  APP_ENV: production # Example environment indicator (dev/stage/prod)

# Triggers: define when this workflow should run
on:
  push: # Trigger on push to main branch
    branches: [main]
  pull_request: # Trigger on PRs to main
    branches: [main]
  workflow_dispatch: # Enables manual triggering via GitHub UI

# Workflow jobs
jobs:
  # First job: Build stage
  build:
    runs-on: ubuntu-latest # GitHub-hosted Ubuntu VM
    env:
      BUILD_DIR: target # Job-specific variable (e.g., for Maven output)

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Clone the repository code

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin" # Use Temurin (OpenJDK)

      - name: Build with Maven
        run: mvn compile # Compile Java code

  # Second job: Test stage
  test:
    runs-on: ubuntu-latest
    needs: build # Run this only after 'build' job is successful

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Run Tests
        run: mvn test # Run unit tests

  # Final job: Deploy stage
  deploy:
    runs-on: ubuntu-latest
    needs: test # Run only after 'test' is successful

    env:
      DEPLOY_KEY: ${{ secrets.MY_SECRET_API_KEY }} # Inject secret via GitHub

    steps:
      - name: Fake Deploy Step
        run: echo "Deploying to $APP_ENV with key $DEPLOY_KEY âœ…" # Fake deploy command
